module service-path-computation {

    yang-version 1;

    namespace "http://ict-strauss.eu/cop/service-path-computation";

    prefix s-path;

    /*import ietf-inet-types {
		prefix inet;
        revision-date 2013-07-15;
	}
    import service-call {
		prefix sc;
	}*/

    organization "CTTC";

    revision "2015-05-30" {
        description
        "Service Path Computation module for STRAUSS";
    }
    
    

    grouping endpoint {
        description "";

        leaf endpoint_id{
            type string;
            description "Name of the endpoint, for example host1-port1";
        }
        leaf router_id{
            type string;
        }
        leaf interface_id{
            type string;
        }
        /*leaf topology-component{
            type topo:end-ref;
        }*/
    }
    
    grouping label{
        description "";
        leaf label-type{
            type enumeration{
                enum GMPLS_FIXED {
                    value 0;
                }
                enum GMPLS_FLEXI {
                    value 1;
                }
            }
        }
        leaf label-value{
            type int32;
        }
    }

    grouping path-type{
        description "The Path represents the individual routes of a Connection.";
        leaf id{
            type string;
        }
        list topo_components{
            key "endpoint_id";
            uses endpoint;
        }
        leaf noPath{
            type boolean;
        }
        leaf multiLayer{
            type boolean;
        }
        container label{
            uses label;
        }
    }


	grouping traffic_params{
		description "";

		leaf reservedBandwidth {
			description "Bandwidth measured in bits/s";
            type int32;
        }
		leaf delay {
			description "Connection delay measured in ms";
            type int32;
        }
	}


    grouping path_request{
        description "";
        
        leaf request-id{
            type string;
        }
        container aEnd{
            uses endpoint;
        }
        container zEnd{
            uses endpoint;
        }
        container traffic_parameters{
            description "TrafficParam covers service specific traffic attributes";
            uses traffic_params;
        }

    }
    
    grouping path_reply{
        description "";
        leaf reply-id{
            type string;
        }
        container path{
            uses path-type;
        }
    }

    rpc path_computation{
        input {
            uses path_request;
        }
        output{
            uses path_reply;
        }
        
    }
}
