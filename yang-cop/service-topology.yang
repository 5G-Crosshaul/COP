module service-topology {

    yang-version 1;

    namespace "http://cttc.es/cop/service-topology";

    prefix s-topology;

    /*import ietf-inet-types {
            prefix inet;
            revision-date 2013-07-15;
      }*/

      organization "CTTC";

    description "YANG version of the Common Orchestration Protocol (COP).";

    revision "2014-11-12" {
      description "Service topology module in progress.";
    }

    grouping topology{
        leaf topology_id{
            type string;
        }
        list nodes{
			key "node_id";
            uses node;
        }
        list edges{
            key "edge_id";
            uses edge;
        }
    }

    grouping edge_end{
        leaf edge_end_id{
            type string;
        }
        leaf switching_cap{
            type string;
        }
        leaf edge_id{
            type string;
        }
		leaf peer_node_id{
			type string;	
		}
    }

    grouping node{
        leaf node_id{
            type string;
        }
        leaf name{
            type string;
        }
		leaf domain{
			type string;
		}
		leaf nodetype{
			type string;		
		}
        list edge_end{
            key "edge_end_id";
            uses edge_end;
        }
    }

    grouping edge{
        leaf edge_id{
            type string;
        }
        leaf name{
            type string;
        }
		leaf linkType{
			type string;		
		}
		leaf metric{
			type string;		
		}
		leaf max_resv_bw{
			type string;	
		}
		leaf unreserv_bw{
			type string;	
		}
        container source{
			config false;
            uses node;
        }
        container target{
			config false;
            uses node;
        }
        container local_ifid{
			config false;
            uses edge_end;
        }
        container remote_ifid{
			config false;
            uses edge_end;
        }
    }

    container topologies{
        config false;
        list topology{
            key "topology_id";
            uses topology;
        }
    }

    container nodes{
        config false;
        list node{
            key "node_id";
            uses node;
        }
    }
   
    container edges{
        config false;
        list edge{
            key "edge_id";
            uses edge;
        }
    }

    container edge_ends{
        config false;
        list edge_end{
            key "edge_end_id";
            uses edge_end;
        }
    }


}
